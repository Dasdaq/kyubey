@model Token
@{
    ViewBag.Current = "token-curve";
    ViewBag.Title = Model.Id + " - " + SR["Curve"];
    Curve curve = ViewBag.Curve;
    var constJs = "";
    for(var i = 0; i < curve.Arguments.Object.Count(); i++)
    {
        constJs += $"var {curve.Arguments.Object.ElementAt(i).Id} = {Model.CurveArguments.Object.ElementAt(i)};";
    }
}
@await Html.PartialAsync("_TokenHeader")

<script src="~/js/d3.min.js"></script>
<script src="~/js/function-plot.min.js"></script>
<script src="~/js/eval-expr.js"></script>

<section>
    <div class="container">
        <div class="row">
            @await Html.PartialAsync("_TokenSidebar")
            <div class="col-md-8">
                @if (!string.IsNullOrEmpty(curve.PriceBalanceFunction))
                {
                    <div class="card">
                        <div>@SR["Price - Balance"]</div>
                        <div id="chartPriceBalance"></div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(curve.PriceSupplyFunction))
                {
                    <div class="card">
                        <div>@SR["Price - Supply"]</div>
                        <div id="chartPriceSupply"></div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(curve.SupplyBalanceFunction))
                {
                    <div class="card">
                        <div>@SR["Supply - Balance"]</div>
                        <div id="chartSupplyBalance"></div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(curve.BalanceSupplyFunction))
                {
                    <div class="card">
                        <div>@SR["Balance - Supply"]</div>
                        <div id="chartBalanceSupply"></div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

<script>
    @(new HtmlString(constJs))
    eval('@(new HtmlString(!string.IsNullOrEmpty(curve.PriceBalanceFunction) ? $"var funcPriceBalance = `{curve.PriceBalanceFunction}`" : ""))');
    eval('@(new HtmlString(!string.IsNullOrEmpty(curve.PriceSupplyFunction) ? $"var funcPriceSupply = `{curve.PriceSupplyFunction}`" : ""))');
    eval('@(new HtmlString(!string.IsNullOrEmpty(curve.SupplyBalanceFunction) ? $"var funcSupplyBalance = `{curve.SupplyBalanceFunction}`" : ""))');
    eval('@(new HtmlString(!string.IsNullOrEmpty(curve.BalanceSupplyFunction) ? $"var funcBalanceSupply = `{curve.BalanceSupplyFunction}`" : ""))');
    if ($('#chartPriceBalance').length > 0) {
        var _funcPriceBalance = (new MathExpression(funcPriceBalance)).toFunction();
        functionPlot({
            target: document.querySelector("#chartPriceBalance"),
            xAxis: { domain: [0, 1] },
            yAxis: { domain: [0, _funcPriceBalance(1)] },
            tip: {
                renderer: function () { }
            },
            grid: true,
            data: [
                {
                    fn: funcPriceBalance
                }
            ]
        });
    }

    if ($('#chartPriceSupply').length > 0) {
        var _funcPriceSupply = (new MathExpression(funcPriceSupply)).toFunction();
        functionPlot({
            target: document.querySelector("#chartPriceSupply"),
            xAxis: { domain: [0, 1] },
            yAxis: { domain: [0, _funcPriceSupply(1)] },
            tip: {
                renderer: function () { }
            },
            grid: true,
            data: [
                {
                    fn: funcPriceSupply
                }
            ]
        });
    }

    if ($('#chartSupplyBalance').length > 0) {
        var _funcSupplyBalance = (new MathExpression(funcSupplyBalance)).toFunction();
        functionPlot({
            target: document.querySelector("#chartSupplyBalance"),
            xAxis: { domain: [0, 10000] },
            yAxis: { domain: [0, _funcSupplyBalance(10000)] },
            tip: {
                renderer: function () { }
            },
            grid: true,
            data: [
                {
                    fn: funcSupplyBalance
                }
            ]
        });
    }

    if ($('#chartBalanceSupply').length > 0) {
        var _funcBalanceSupply = (new MathExpression(funcBalanceSupply)).toFunction();
        functionPlot({
            target: document.querySelector("#chartBalanceSupply"),
            xAxis: { domain: [0, 10000000] },
            yAxis: { domain: [0, _funcBalanceSupply(10000000)] },
            tip: {
                renderer: function () { }
            },
            grid: true,
            data: [
                {
                    fn: funcBalanceSupply
                }
            ]
        });
    }
</script>