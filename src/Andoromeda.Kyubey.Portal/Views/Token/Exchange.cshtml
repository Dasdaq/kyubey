@model Token
@{
    ViewBag.Title = Model.Id + " - " + SR["Exchange"];
    ViewBag.Current = "token-exchange";
    Bancor bancor = ViewBag.Bancor;
    Otc otc = ViewBag.Otc;
}
@await Html.PartialAsync("_TokenHeader")
<script src="~/js/moment.js"></script>
<script src="~/js/kyubey.js"></script>
@if (bancor != null)
{
    <script src="/token/@(Model.Id).js"></script>
}
<script src="~/js/vue.js"></script>
<section id="app">
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-3">
                <div class="card exchange-order-card">
                    <div class="exchange-orders-header">
                        <a class="order-filter-button" v-bind:class="{ 'active': control.order === 'mixed' }" v-on:click="control.order = 'mixed'"><img src="~/img/order-mixed.png" /></a>
                        <a class="order-filter-button" v-bind:class="{ 'active': control.order === 'buy' }" v-on:click="control.order = 'buy'"><img src="~/img/order-buy.png" /></a>
                        <a class="order-filter-button" v-bind:class="{ 'active': control.order === 'sell' }" v-on:click="control.order = 'sell'"><img src="~/img/order-sell.png" /></a>
                    </div>
                    <table class="exchange-orders-table" id="sell-order-table" v-if="control.order !== 'buy'">
                        <thead>
                            <tr>
                                <th>@SR["Unit Price"] (EOS)</th>
                                <th>@SR["Amount"] (@Model.Id)</th>
                                <th>@SR["Total"] (EOS)</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="x in sellOrders" v-on:click="setPublish(x.unit, x.amount)">
                                <td>{{ parseFloat(x.unit).toFixed(4) }}</td>
                                <td>{{ parseFloat(x.amount).toFixed(4) }}</td>
                                <td>{{ parseFloat(x.total).toFixed(4) }}</td>
                            </tr>
                            <tr v-if="sellOrders.length === 0">
                                <td colspan="3" style="text-align: center">@SR["No more orders"]</td>
                            </tr>
                        </tbody>
                    </table>
                    <div class="exchange-orders-split">
                        {{ lastMatched }}
                    </div>
                    <table class="exchange-orders-table" id="buy-order-table" v-if="control.order !== 'sell'">
                        <thead v-bind:class="{ 'hidden': control.order !== 'buy' }">
                            <tr>
                                <th>@SR["Unit Price"] (EOS)</th>
                                <th>@SR["Amount"] (@Model.Id)</th>
                                <th>@SR["Total"] (EOS)</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="x in buyOrders" v-on:click="setPublish(x.unit, x.amount)">
                                <td>{{ x.unit }}</td>
                                <td>{{ x.amount }}</td>
                                <td>{{ x.total }}</td>
                            </tr>
                            <tr v-if="buyOrders.length === 0">
                                <td colspan="3" style="text-align: center">@SR["No more orders"]</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="col-md-6">
                <div class="card exchange-chart-card">
                    <div class="exchange-chart-menu">
                        <a class="exchange-chart-menu-item active">@SR["Candlestick"]</a>
                        <a class="exchange-chart-menu-item">@SR["Curve"]</a>
                    </div>
                </div>
                <div class="card exchange-submit-card">
                    <div class="exchange-chart-menu">
                        @if (otc != null)
                        {
                            <a class="exchange-chart-menu-item" v-bind:class="{ 'active': control.publish === 'limit' }" v-on:click="control.publish = 'limit'">@SR["Limit Order"]</a>
                            <a class="exchange-chart-menu-item" v-bind:class="{ 'active': control.publish === 'market' }" v-on:click="control.publish = 'market'">@SR["Market Order"]</a>
                        }
                        @if (bancor != null)
                        {
                            <a class="exchange-chart-menu-item" v-bind:class="{ 'active': control.publish === 'contract' }" v-on:click="control.publish = 'contract'">@SR["Exchange Via Contract"]</a>
                        }
                    </div>
                    <div class="row exchange-panel">
                        <div class="col-md-6">
                            <div class="exchange-buy-text">@SR["Buy {0}", Model.Id]</div>
                            <div class="row exchange-form-input">
                                <div class="col-sm-4 exchange-label">@SR["Price"]</div>
                                <div class="col-sm-8" v-if="control.publish === 'limit'">
                                    <input type="text" class="exchange-textbox" v-model="inputs.buyPrice" />
                                    <div class="exchange-textbox-unit">EOS</div>
                                </div>
                                <div class="col-sm-8 exchange-text" v-if="control.publish === 'market'">
                                    @SR["Best Matches"]
                                </div>
                                <div class="col-sm-8 exchange-text" v-if="control.publish === 'contract'">
                                    {{ contractBuy }}
                                </div>
                            </div>
                            <div class="row exchange-form-input" v-if="control.publish === 'limit'">
                                <div class="col-sm-4 exchange-label">@SR["Amount"]</div>
                                <div class="col-sm-8">
                                    <input type="text" class="exchange-textbox" v-model="inputs.buyAmount" />
                                    <div class="exchange-textbox-unit">@Model.Id</div>
                                </div>
                            </div>
                            <div class="row exchange-form-input">
                                <div class="col-sm-4 exchange-label">@SR["Total"]</div>
                                <div class="col-sm-8">
                                    <input type="text" class="exchange-textbox" v-model="inputs.buyTotal" />
                                    <div class="exchange-textbox-unit">EOS</div>
                                </div>
                            </div>
                            <div>
                                <input type="button" class="btn btn-primary btn-full-width" value="@SR["Buy {0}", Model.Id]" v-on:click="buy()" />
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="exchange-sell-text">@SR["Sell {0}", Model.Id]</div>
                            <div class="row exchange-form-input">
                                <div class="col-sm-4 exchange-label">@SR["Price"]</div>
                                <div class="col-sm-8" v-if="control.publish === 'limit'">
                                    <input type="text" class="exchange-textbox" v-model="inputs.sellPrice" />
                                    <div class="exchange-textbox-unit">EOS</div>
                                </div>
                                <div class="col-sm-8 exchange-text" v-if="control.publish === 'market'">
                                    @SR["Best Matches"]
                                </div>
                                <div class="col-sm-8 exchange-text" v-if="control.publish === 'contract'">
                                    {{ contractSell }}
                                </div>
                            </div>
                            <div class="row exchange-form-input">
                                <div class="col-sm-4 exchange-label">@SR["Amount"]</div>
                                <div class="col-sm-8">
                                    <input type="text" class="exchange-textbox" v-model="inputs.sellAmount" />
                                    <div class="exchange-textbox-unit">@Model.Id</div>
                                </div>
                            </div>
                            <div class="row exchange-form-input" v-if="control.publish === 'limit'">
                                <div class="col-sm-4 exchange-label">@SR["Total"]</div>
                                <div class="col-sm-8">
                                    <input type="text" class="exchange-textbox" v-model="inputs.sellTotal" />
                                    <div class="exchange-textbox-unit">EOS</div>
                                </div>
                            </div>
                            <div>
                                <input type="button" class="btn btn-primary btn-full-width" value="@SR["Sell {0}", Model.Id]" v-on:click="sell()" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card exchange-pair-card">
                    <div class="exchange-pair-menu">
                        <div class="row">
                            <div class="col-lg-7">
                                <a class="exchange-pair-menu-item active"><i class="fa fa-list"></i> @SR["All"]</a>
                                <a class="exchange-pair-menu-item"><i class="fa fa-star"></i> @SR["Favorites"]</a>
                            </div>
                            <div class="col-lg-5">
                                <input type="text" class="exchange-search-textbox" placeholder="@SR["Search"]" />
                            </div>
                        </div>
                    </div>
                    <div class="exchange-pair-table-outer">
                        <table class="exchange-pair-table">
                            <thead>
                                <tr>
                                    <th>@SR["Token"]</th>
                                    <th>@SR["Last Price"]</th>
                                    <th>@SR["Change"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="x in pairs" v-on:click="redirectToToken(x.id)">
                                    <td><i class="fa" v-bind:class="{ 'fa-star-o': !fav.filter(y => y == x.id).length, 'fa-star': fav.filter(y => y == x.id).length }"></i> {{ x.id }}</td>
                                    <td>{{ parseFloat(x.price).toFixed(4) }}</td>
                                    <td v-bind:class="{ 'green': x.change >= 0, 'red': x.change < 0 }">{{ parseFloat(x.change / 100.0).toFixed(2) }}%</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="card exchange-transaction-card">
                    <div class="exchange-transaction-menu">
                        @SR["Recent Transactions"]
                    </div>
                    <div class="exchange-transaction-table-outer">
                        <table class="exchange-transaction-table">
                            <thead>
                                <tr>
                                    <th>@SR["Price"] (EOS)</th>
                                    <th>@SR["Amount"] (@Model.Id)</th>
                                    <th>@SR["Time"]</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="x in recentTransactions">
                                    <td>{{ parseFloat(x.price).toFixed(4) }}</td>
                                    <td>{{ parseFloat(x.amount).toFixed(4) }}</td>
                                    <td>{{ moment(x.time).format('MM-DD hh:mm:ss') }}</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="exchange-chart-menu">
                        <a class="exchange-chart-menu-item" v-bind:class="{ 'active': control.my === 'current' }" v-on:click="control.my = 'current'">@SR["Opening Orders"]</a>
                        <a class="exchange-chart-menu-item" v-bind:class="{ 'active': control.my === 'history' }" v-on:click="control.my = 'history'">@SR["History Orders"]</a>
                    </div>
                    <table class="exchange-order-state-table" v-if="control.my === 'current'">
                        <thead>
                            <tr>
                                <th>@SR["Token"]</th>
                                <th>@SR["Type"]</th>
                                <th>@SR["Published at"]</th>
                                <th>@SR["Unit price"]</th>
                                <th>@SR["Amount"]</th>
                                <th>@SR["Action"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="x in currentOrders">
                                <td>{{ x.token }}</td>
                                <td>{{ x.type }}</td>
                                <td>{{ x.time }}</td>
                                <td>{{ x.price }}</td>
                                <td>{{ x.amount }}</td>
                                <td></td>
                            </tr>
                        </tbody>
                    </table>
                    <table class="exchange-order-state-table" v-if="control.my === 'history'">
                        <thead>
                            <tr>
                                <th>@SR["Token"]</th>
                                <th>@SR["Bidder"]</th>
                                <th>@SR["Asker"]</th>
                                <th>@SR["Matched at"]</th>
                                <th>@SR["Unit price"]</th>
                                <th>@SR["Amount"]</th>
                                <th>@SR["Total"]</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="x in currentOrders">
                                <td>{{ x.tokenId }}</td>
                                <td>{{ x.bidder }}</td>
                                <td>{{ x.asker }}</td>
                                <td>{{ x.time }}</td>
                                <td>{{ x.unitPrice }} EOS</td>
                                <td>{{ parseFloat(x.ask).toFixed(4) }} {{ x.tokenId }}</td>
                                <td>{{ parseFloat(x.bid).toFixed(4) }} EOS</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalContent"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="modalTake" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@SR["Transaction"]</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-2">
                        @SR["Outgoing"]
                    </div>
                    <div class="col-md-4">
                        <input id="slider1" data-slider-id="slider1" type="text" />
                    </div>
                    <div class="col-md-4">
                        <input class="form-control" id="value1" />
                    </div>
                    <div class="col-md-2" id="symbol1">
                    </div>
                </div>
                <div class="row" style="margin-top: 30px">
                    <div class="col-md-2">
                        @SR["Incoming"]
                    </div>
                    <div class="col-md-4">
                        <input id="slider2" data-slider-id="slider2" type="text" />
                    </div>
                    <div class="col-md-4">
                        <input class="form-control" id="value2" />
                    </div>
                    <div class="col-md-2" id="symbol2">
                    </div>
                </div>
                <div class="row" style="margin-top: 30px">
                    <div class="col-md-4" style="text-align: center">
                        @SR["Unit Price"]
                    </div>
                    <div class="col-md-2">
                        ≈
                    </div>
                    <div class="col-md-4" id="unit">
                    </div>
                    <div class="col-md-2">
                        EOS
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" data-dismiss="modal" onclick="take2()">@SR["Take"]</button>
            </div>
        </div>
    </div>
</div>

<script>
    var app = new Vue({
        el: '#app',
        data: {
            control: {
                order: 'mixed',
                my: 'current',
                publish: '@(otc == null ? "contract" : "limit")'
            },
            inputs: {
                pair: null,
                buyPrice: 0,
                sellPrice: 0,
                buyAmount: 0,
                sellAmount: 0,
                buyTotal: 0,
                sellTotal: 0
            },
            buyOrders: [],
            sellOrders: [],
            lastMatched: '0.0000',
            recentTransactions: [],
            currentOrders: [],
            historyOrders: [],
            pairs: [],
            contractBuy: null,
            contractSell: null,
            fav: []
        },
        watch: {
            'inputs.buyPrice': function (val) {
                this.inputs.buyTotal = val * this.inputs.buyAmount;
            },
            'inputs.buyAmount': function (val) {
                this.inputs.buyTotal = val * this.inputs.buyPrice;
            },
            'inputs.buyTotal': function (val) {
                if (this.control.publish === 'limit') {
                    this.inputs.buyPrice = val / (this.inputs.buyAmount || 1);
                }
            },
            'inputs.sellPrice': function (val) {
                this.inputs.sellTotal = val * this.inputs.sellAmount;
            },
            'inputs.sellAmount': function (val) {
                this.inputs.sellTotal = val * this.inputs.sellPrice;
            },
            'inputs.sellTotal': function (val) {
                if (this.control.publish === 'limit') {
                    this.inputs.sellPrice = val / (this.inputs.sellAmount || 1);
                }
            },
            deep: true
        },
        created: function () {
            this.init();
            setInterval(this.init, 1000 * 60);
        },
        methods: {
            init: function () {
                this.getOrders();
                this.getRecentTransaction();
                this.getCurrentOrders();
                this.getHistoryOrders();
                this.getContractPrices();
                this.getPairs();
            },
            moment: function (time) {
                return moment(time);
            },
            getOrders: function () {
                var self = this;
                $.getJSON('/token/@Model.Id/buy-data', {}, function (data) {
                    self.buyOrders = data;
                });
                $.getJSON('/token/@Model.Id/sell-data', {}, function (data) {
                    self.sellOrders = data;
                });
                $.get('/token/@Model.Id/last-match', {}, function (data) {
                    self.lastMatched = parseFloat(data).toFixed(4);
                });
            },
            getRecentTransaction: function () {
                var self = this;
                $.getJSON('/token/@Model.Id/recent-transaction', {}, function (data) {
                    self.recentTransactions = data;
                });
            },
            getCurrentOrders: function () {
                if (account && account.name) {
                    var self = this;
                    $.getJSON(`/token/${account.name}/current-order`, {}, function (data) {
                        self.currentOrders = data;
                    });
                }
            },
            getHistoryOrders: function () {
                var self = this;
                if (account && account.name) {
                    $.getJSON(`/token/${account.name}/history-order`, {}, function (data) {
                        self.historyOrders = data;
                    });
                }
            },
            getContractPrices: function () {
                var self = this;
                $.getJSON(`/token/@Model.Id/contract-price`, {}, function (data) {
                    self.contractBuy = data.buyPrice;
                    self.contractSell = data.sellPrice;
                });
            },
            getPairs: function () {
                var self = this;
                $.getJSON('/token/pair', { token: self.inputs.pair }, function (data) {
                    self.pairs = data;
                });
            },
            redirectToToken: function (id) {
                window.location = `/token/${id}/exchange`;
            },
            setPublish: function (price, amount) {
                this.inputs.buyPrice = price;
                this.inputs.buyAmount = amount;
                this.inputs.sellPrice = price;
                this.inputs.sellAmount = amount;
            },
            buy: function () {
                if (!account || !account.name) {
                    showModal('@(new HtmlString(SR["Error"]))', '@(new HtmlString(SR["Please login scatter before publish order."]))');
                    return;
                }
                if (this.control.publish === 'limit') {
                    var price = parseFloat(parseFloat(this.inputs.buyPrice).toFixed(4));
                    var ask = parseFloat(parseFloat(this.inputs.buyAmount).toFixed(4));
                    var bid = parseFloat(ask * price);
                    eos.contract('eosio.token', { requiredFields })
                        .then(contract => {
                            return contract.transfer(
                                account.name,
                                '@ViewBag.OtcContract',
                                bid.toFixed(4) + ' EOS',
                                ask.toFixed(4) + ' @Model.Id',
                                {
                                    authorization: [`${account.name}@@${account.authority}`]
                                });
                        })
                        .then(() => {
                            showModal('@(new HtmlString(SR["Transaction Succeeded"]))', '@(new HtmlString(SR["You can confirm the result in your wallet"])), @(new HtmlString(SR["Please contact us if you have any questions"]))');
                        })
                        .catch(error => {
                            showModal('@(new HtmlString(SR["Transaction Failed"]))', error.message + '@(new HtmlString(SR["Please contact us if you have any questions"]))');
                        });
                }
                else if (this.control.publish === 'market') {
                    eos.contract('eosio.token', { requiredFields })
                        .then(contract => {
                            return contract.transfer(
                                account.name,
                                '@ViewBag.OtcContract',
                                parseFloat(this.inputs.buyTotal).toFixed(4) + ' EOS',
                                'market',
                                {
                                    authorization: [`${account.name}@@${account.authority}`]
                                });
                        })
                        .then(() => {
                            showModal('@(new HtmlString(SR["Transaction Succeeded"]))', '@(new HtmlString(SR["You can confirm the result in your wallet"])), @(new HtmlString(SR["Please contact us if you have any questions"]))');
                        })
                        .catch(error => {
                            showModal('@(new HtmlString(SR["Transaction Failed"]))', error.message + '@(new HtmlString(SR["Please contact us if you have any questions"]))');
                        });
                }
                else if (this.control.publish === 'contract') {
                    buy(parseFloat(this.inputs.buyTotal));
                }
            },
            sell: function () {
                if (!account || !account.name) {
                    showModal('@(new HtmlString(SR["Error"]))', '@(new HtmlString(SR["Please login scatter before publish order."]))');
                    return;
                }
                if (this.control.publish === 'limit') {
                    var price = parseFloat(parseFloat(this.inputs.sellPrice).toFixed(4));
                    var bid = parseFloat(parseFloat(this.inputs.sellAmount).toFixed(4));
                    var ask = parseFloat(bid * price);
                    eos.contract('@Model.Contract', { requiredFields })
                        .then(contract => {
                            return contract.transfer(
                                account.name,
                                '@ViewBag.OtcContract',
                                bid.toFixed(4) + ' @Model.Id',
                                ask.toFixed(4) + ' EOS',
                                {
                                    authorization: [`${account.name}@@${account.authority}`]
                                });
                        })
                        .then(() => {
                            showModal('@(new HtmlString(SR["Transaction Succeeded"]))', '@(new HtmlString(SR["You can confirm the result in your wallet"])), @(new HtmlString(SR["Please contact us if you have any questions"]))');
                        })
                        .catch(error => {
                            showModal('@(new HtmlString(SR["Transaction Failed"]))', error.message + '@(new HtmlString(SR["Please contact us if you have any questions"]))');
                        });
                }
                else if (this.control.publish === 'market') {
                    eos.contract('@Model.Contract', { requiredFields })
                        .then(contract => {
                            return contract.transfer(
                                account.name,
                                '@ViewBag.OtcContract',
                                parseFloat(this.inputs.sellAmount).toFixed(4) + ' @Model.Id',
                                'market',
                                {
                                    authorization: [`${account.name}@@${account.authority}`]
                                });
                        })
                        .then(() => {
                            showModal('@(new HtmlString(SR["Transaction Succeeded"]))', '@(new HtmlString(SR["You can confirm the result in your wallet"])), @(new HtmlString(SR["Please contact us if you have any questions"]))');
                        })
                        .catch(error => {
                            showModal('@(new HtmlString(SR["Transaction Failed"]))', error.message + '@(new HtmlString(SR["Please contact us if you have any questions"]))');
                        });
                }
                else if (this.control.publish === 'contract') {
                    sell(parseFloat(this.inputs.sellAmount));
                }
            }
        }
    });
</script>