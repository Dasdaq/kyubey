@{
    TokenIncubationViewModel Model = ViewBag.HandlerView;
    Token token = ViewBag.Token;
    ViewBag.Current = "token-about";
    ViewBag.Theme = "dark";
    ViewBag.Title = token.Id;
}

<script src="~/js/eos.js"></script>
<script src="~/js/kyubey.js"></script>
<script src="~/js/vue.js"></script>
<script src="/token/@(token.Id).js"></script>

<section id="app" class="token-incubation-container">
    <div class="container">
        <div class="col-md-12">
            <div class="row">
                <div class="token-incubation-inner">
                    <div class="row">
                        <div class="col-md-7">
                            <div class="token-incubation-image" v-bind:style="'background: url(' + current + ')'"></div>
                            <div class="token-incubation-image-circle-outer">
                                <div v-for="x in images" class="token-incubation-image-circle" v-bind:class="{ active: current === x }" v-on:click="current = x"></div>
                            </div>
                        </div>

                        <div class="col-md-5">
                            <div class="row">
                                <div class="col-md-12">
                                    <a class="tab-incubation" v-bind:class="{ 'active': tab === 'general' }" v-on:click="tab = 'general'">@SR["General"]</a>
                                    <a class="tab-incubation" v-bind:class="{ 'active': tab === 'exchange' }" v-on:click="tab = 'exchange'">@SR["Exchange"]</a>
                                </div>
                                <template v-if="tab === 'general'">
                                    <div class="col-md-12">
                                        <div class="token-incubation-raised">@($"{Model.IncubationInfo.CurrentRaised.ToString("N")} EOS {SR["Raised"]}")</div>
                                        <div class="progress" style="background-color:darkgray;height:30px;">
                                            @{
                                                long raisedPercent = (Model.IncubationInfo.CurrentRaised == 0 || Model.IncubationInfo.TargetCredits == 0) ? 0 : (long)(100 * Model.IncubationInfo.CurrentRaised / Model.IncubationInfo.TargetCredits);
                                            }
                                            <div class="progress-bar bg-success" role="progressbar" style="width: @(raisedPercent)%" aria-valuenow="@(raisedPercent)" aria-valuemin="0" aria-valuemax="100">@(raisedPercent)%</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="token-incubation-card">
                                            <div class="token-incubation-card-icon"><i class="fa fa-clock-o"></i></div>
                                            <div class="token-incubation-card-text">@SR["Remaining Time"]</div>
                                            <div class="token-incubation-card-value">@SR["{0} Day(s)", Model.IncubationInfo.RemainingDay]</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="token-incubation-card">
                                            <div class="token-incubation-card-icon"><i class="fa fa-btc"></i></div>
                                            <div class="token-incubation-card-text">@SR["Remaining Amount"]</div>
                                            <div class="token-incubation-card-value">@($"{ Math.Max((Model.IncubationInfo.TargetCredits - Model.IncubationInfo.CurrentRaised), 0).ToString("N")}") EOS</div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="token-incubation-card">
                                            <div class="token-incubation-card-icon"><i class="fa fa-thumbs-o-up"></i></div>
                                            <div class="token-incubation-card-text">@SR["Supporters"]</div>
                                            <div class="token-incubation-card-value">@SR["{0} User(s)", Model.IncubationInfo.CurrentRaisedCount]</div>
                                        </div>
                                    </div>
                                </template>
                                <template v-if="tab === 'exchange'">
                                    <div class="col-md-12" v-if="!isSignedIn">
                                        <a v-on:click="login" class="btn btn-incubation-exchange col-md-12">@SR["Login with Scatter"]</a>
                                    </div>
                                    <div class="col-md-12" v-if="isSignedIn">
                                        <div class="token-incubation-infobox-title">@SR["Balance"]</div>
                                        <div class="token-incubation-infobox-subtitle">{{ parseFloat(eosBalance).toFixed(4) }} EOS / {{ parseFloat(tokenBalance).toFixed(4) }} @token.Id</div>
                                    </div>
                                    <div class="col-md-12" v-if="isSignedIn">
                                        <div class="token-incubation-infobox-title">@SR["Amount"] (EOS)</div>
                                        <div class="token-incubation-infobox-subtitle">
                                            <input v-model="amount" class="incubation-buy-amount-txtbox" id="buyAmount" />
                                        </div>
                                    </div>
                                    <div class="col-md-12" v-if="isSignedIn">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <a v-on:click="amount = '1.0000'" class="btn-incubation-amount">1 EOS</a>
                                            </div>
                                            <div class="col-md-3">
                                                <a v-on:click="amount = '10.0000'" class="btn-incubation-amount">10 EOS</a>
                                            </div>
                                            <div class="col-md-3">
                                                <a v-on:click="amount = '50.0000'" class="btn-incubation-amount">50 EOS</a>
                                            </div>
                                            <div class="col-md-3">
                                                <a v-on:click="amount = '100.0000'" class="btn-incubation-amount">100 EOS</a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12" v-if="isSignedIn">
                                        <div class="row">
                                            <div class="col-md-3">
                                                <a v-on:click="amount = eosBalance * 0.25" class="btn-incubation-amount">25%</a>
                                            </div>
                                            <div class="col-md-3">
                                                <a v-on:click="amount = eosBalance * 0.5" class="btn-incubation-amount">50%</a>
                                            </div>
                                            <div class="col-md-3">
                                                <a v-on:click="amount = eosBalance * 0.75" class="btn-incubation-amount">75%</a>
                                            </div>
                                            <div class="col-md-3">
                                                <a v-on:click="amount = eosBalance" class="btn-incubation-amount">100%</a>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-12" v-if="isSignedIn">
                                        <div class="token-incubation-infobox-title">@token.Id</div>
                                        <div class="token-incubation-infobox-subtitle">{{ parseFloat(amount * @ViewBag.CurrentPrice.ToString("0.00000000")).toFixed(4) }} @token.Id</div>
                                    </div>
                                    <div class="col-md-12" v-if="isSignedIn">
                                        <a v-on:click="buy()" class="btn btn-incubation-exchange col-md-12">@SR["Buy"]</a>
                                    </div>
                                </template>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
@await Html.PartialAsync("_TokenInfoBox")
<section>
    <div class="container">
        <div class="row ">

            <div class="col-md-12">

                <ul class="nav nav-tabs" role="tablist">
                    <li class="nav-item"><a class="nav-link active show" href="#tab-1" data-toggle="tab" role="tab" aria-selected="true">@SR["Detail"]</a></li>
                    <li class="nav-item"><a class="nav-link" href="#tab-2" data-toggle="tab" role="tab" aria-selected="false">@SR["Recent updates"]</a></li>
                    @*<li class="nav-item"><a class="nav-link" href="#tab-3" data-toggle="tab" role="tab" aria-selected="false">@SR["Comments"]</a></li>*@
                </ul>


                <div class="tab-content">
                    <div class="tab-pane active show" id="tab-1" role="tabpanel">
                        @Html.Marked(Model.IncubationInfo.Detail)
                    </div>
                    <div class="tab-pane" id="tab-2" role="tabpanel">
                        @if (Model.RecentUpdate != null)
                        {
                            @foreach (var up in Model.RecentUpdate)
                            {
                                <h4>@up.Title</h4>
                                <p>@up.Time.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</p>
                                <p>@Html.Marked(up.Content)</p>
                            }
                        }
                    </div>
                    <div class="tab-pane" id="tab-3" role="tabpanel">
                        @if (Model.Comments != null)
                        {
                            foreach (var c in Model.Comments)
                            {
                                <p>
                                    <span>@($"{c.UserName}:{c.Content}")</span>
                                    <a href="#">@SR["reply"]</a>
                                </p>

                                if (c.ChildComments != null)
                                {
                                    foreach (var cc in c.ChildComments)
                                    {
                                        <p style=" margin-left:30px;"><span> @($"{cc.UserName} {@SR["to"]} {cc.ReplyUserName}:{cc.Content}")</span><a href="#">@SR["reply"]</a></p>
                                    }
                                }
                            }
                        }

                    </div>
                </div>
            </div>
        </div>

    </div>
</section>

<div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalContent"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    var app = new Vue({
        el: '#app',
        data: {
            images: @(new HtmlString(Newtonsoft.Json.JsonConvert.SerializeObject(Model.IncubatorBannerUrls))),
            current: null,
            tab: 'general',
            isSignedIn: false,
            buySupported: false,
            sellSupported: false,
            amount: '0.0000',
            tokenBalance: null,
            eosBalance: null
        },
        watch: {
        },
        created: function () {
            var self = this;
            self.current = self.images[0];
            setInterval(function () {
                var index = self.images.indexOf(self.current);
                ++index;
                if (index >= self.images.length) {
                    index = 0;
                }
                self.current = self.images[index];
            }, 15000);

            setInterval(function () {
                var self = this;
                try {
                    if (account && account.name) {
                        self.isSignedIn = true;
                    } else {
                        self.isSignedIn = false;
                    }
                } catch (e) {
                    self.isSignedIn = false;
                }

                try {
                    if (window.buy) {
                        self.buySupported = true;
                    } else {
                        self.buySupported = false;
                    }
                } catch (e) {
                    self.buySupported = false;
                }

                try {
                    if (window.sell) {
                        self.sellSupported = true;
                    } else {
                        self.sellSupported = false;
                    }
                } catch (e) {
                    self.sellSupported = false;
                }
            }, 2000);

            self.getBalances();
            setInterval(function () {
                self.getBalances();
            }, 15000);
        },
        methods: {
            login: function () {
                if (!('scatter' in window)) {
                    showModal('Scatter插件没有找到', 'Scatter是一款EOS钱包，运行在Chrome浏览器中，请您确定已经安装Scatter插件. 参考：https://www.jianshu.com/p/a2e1e6204023');
                } else {
                    var self = this;

                    var network = {
                        blockchain: 'eos',
                        host: host,
                        port: 443,
                        protocol: 'https',
                        chainId: chain_id
                    };

                    scatter.getIdentity({ accounts: [network] }).then(identity => {
                        account = identity.accounts.find(acc => acc.blockchain === 'eos');
                        eos = scatter.eos(network, Eos, {});
                        requiredFields = { accounts: [network] };
                        self.isSignedIn = true;
                        self.getBalances();
                    });
                }
            },

            buy: function () {
                buy();
            },

            getBalances: function () {
                if (account && account.name) {
                    this.getBalance(account.name, 'EOS');
                    this.getBalance(account.name, '@token.Id');
                }
            },

            getBalance: function (account_name, token) {
                var self = this;
                $.get(`/token/${account_name}/balance/${token}`, {}, function (data) {
                    if (token === 'EOS') {
                        self.eosBalance = parseFloat(data);
                    } else {
                        self.tokenBalance = parseFloat(data);
                    }
                });
            },
        }
    });
</script>
